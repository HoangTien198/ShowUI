using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using Microsoft.Win32;
//using System.Diagnostics;
using System.Data.SqlClient;
using System.Security.Cryptography;
using System.Threading;
using System.Reflection;

namespace ShowUIApp
{
    public partial class showUI : Form
    {
        const string subkey = @"SOFTWARE\NETGEAR\STATION";
        string currentDirectory = Environment.CurrentDirectory;
        string serverPath = @"F:\lsy\ID\SPC_Folder";
        string openkey,orgPass="0";
        RegistryKey _OpenKey, _StationKey;
        string sName = Environment.MachineName;
        string sModel, sType, sModelName, _Model, client_ip="";
        DateTime nDate;
        IniFile fSpcControl, ModelConfig, fSPCspec;
        float YRGreen, YRYellow, SRRGreen, SRRYellow, TRRGreen, TRRYellow;
        string connectionString,UpdateStatus="x";
        frmChart _Chart = new frmChart();
        string xxx="xxx";
        string pathUpdate = @"F:\Temp\TE-PROGRAM\TE-PRO2\Jerry\Fly\";
        bool running = false;
        DateTime timeSleep=DateTime.Now;
        public showUI()
        {
            InitializeComponent();
        }

        public bool check_spec(string src, string des, float spec)
        {
            int i = 0;
            float _src, _des;
            string[] tgSrc = new string[10];
            string[] tgDes = new string[10];
            tgSrc = src.Split(' ');
            tgDes = des.Split(' ');
            //if (tgDes.Length != tgSrc.Length) return false;
            for (i = 0; i < tgSrc.Length; i++)
            {
                try
                {
                    _des = Convert.ToSingle(tgDes[i]);
                    _src = Convert.ToSingle(tgSrc[i]);
                }
                catch
                {
                    return false;
                }
                if ((_des < (_src - spec)) || (_des > (_src + spec))) return false;

            }
            return true;
        }
        private string DeCrypt(string strDecypt, string key)
        {
            try
            {
                byte[] keyArr;
                byte[] DeCryptArr = Convert.FromBase64String(strDecypt);
                MD5CryptoServiceProvider MD5Hash = new MD5CryptoServiceProvider();
                keyArr = MD5Hash.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                TripleDESCryptoServiceProvider tripDes = new TripleDESCryptoServiceProvider();
                tripDes.Key = keyArr;
                tripDes.Mode = CipherMode.ECB;
                tripDes.Padding = PaddingMode.PKCS7;
                ICryptoTransform transform = tripDes.CreateDecryptor();
                byte[] arrResult = transform.TransformFinalBlock(DeCryptArr, 0, DeCryptArr.Length);
                return UTF8Encoding.UTF8.GetString(arrResult);
            }
            catch (Exception exx)
            {
                return exx.Message.ToString();
            }
        }

        private void CheckSPC_Tick(object sender, EventArgs e)
        {
            
            System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo();
            psi.CreateNoWindow = true;
            psi.UseShellExecute = false;
            psi.RedirectStandardInput = true;
            psi.RedirectStandardOutput = true;
            psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
            psi.FileName = "net.exe";
            psi.Arguments = @"time \\10.224.81.37 /set /y";
            System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi);
            int widthsc = Screen.PrimaryScreen.WorkingArea.Width;
            this.Size = new Size(widthsc, 60);
            btnCall.SetBounds(widthsc - 88, 32, 83, 24);
            string newPass;
            if (xxx.Equals("#FLY"))
            {
                xxx = "xxx";
                IniFile.WriteValue("Jerry", "Boom", "0", pathUpdate + "Ctrl.ini");
            }
            if (_StationKey != null)
            {
                newPass = _StationKey.GetValue("PASS", "1").ToString();
                if (sType.Contains("PT")||sType.Equals("FT"))
                {
                    if (!orgPass.Equals(newPass))
                    {
                        orgPass = newPass;
                        if (_StationKey != null)
                        {
                            sModel = _StationKey.GetValue("SFISDATA","").ToString();
                            if (sModel.Length > 32)
                            {
                                sModel = sModel.Substring(5, 25).Trim();
                                sModelName = ModelConfig.ReadString("Model", sModel);
                                fSPCspec = new IniFile(@"F:\lsy\Test\DownloadConfig\" + sModelName);
                                try
                                {
                                    writeSPCfile();
                                }
                                catch(Exception exx)
                                {
                                    event_log(exx.Message.ToString());
                                }
                            }
                        }
                    }
                }
            }
        }

        private void showUI_Load(object sender, EventArgs e)
        {
            IPHostEntry host;
            host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (IPAddress ip in host.AddressList)
            {
                if (ip.ToString().StartsWith("138"))
                {
                    client_ip = ip.ToString();
                    break;
                }
                else
                {
                    client_ip = "No IP Prefix: 138 !";
                }
            }
            //syn time
            IniFile fSetting = new IniFile(@"F:\lsy\Test\DownloadConfig\AutoDL\Setup.ini");
            string encrypt = fSetting.ReadString("CONNECTSQL", "SERVER");
            if(encrypt.Length<1)
                encrypt = "IoANcBKCYRlY6XDg/Gc7yO5HSRTe9sgHcJBbCLWrMMoV/4q2pntfoGrWMrV3mq2LEma4PVUEWVbBDuQ04Dmdlad9WfPphVOTHgW3jQwccuGacUXX9zsdcw==";
            //string encrypt = "IoANcBKCYRlY6XDg/Gc7yO5HSRTe9sgHcJBbCLWrMMoV/4q2pntfoGrWMrV3mq2LEma4PVUEWVbBDuQ04Dmdlad9WfPphVOTHgW3jQwccuGacUXX9zsdcw==";
            serverPath = fSetting.ReadString("COMMON", "SPC_Folder");
            connectionString = DeCrypt(encrypt, "ThangFly");
            //connectionString = @"Data Source=THANG-PC\SQLEXPRESS,1433;Initial Catalog=ars_system;User ID=sa;Password=********;";
            this.Top = 0;
            this.Left = 0;
            int widthsc = Screen.PrimaryScreen.WorkingArea.Width;
            this.Size = new Size(widthsc, 60);
            btnCall.SetBounds(widthsc - 88, 32, 83, 24);
            _OpenKey = Registry.LocalMachine.OpenSubKey(subkey);
            if (_OpenKey != null)
            {
                openkey = _OpenKey.GetValue("OpenKey", "").ToString();
                update_infoTPG();
                if(_StationKey!=null) orgPass = _StationKey.GetValue("PASS", "1").ToString();
            }
            Thread update_sta_info = new Thread(update_station_info);
            update_sta_info.Start();

            lblStation.Text = sName;
            ModelConfig = new IniFile(@"F:\lsy\Test\DownloadConfig\ModelConfig.ini");
            fSpcControl = new IniFile(@"F:\lsy\Test\DownloadConfig\AutoDL\SPC_Color_Define.ini");
            try
            {
                YRGreen = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCYieldGreen"));
                YRYellow = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCYieldYellow"));
                SRRGreen = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCCurGreen"));
                SRRYellow = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCCurYellow"));
                TRRGreen = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCStaGreen"));
                TRRYellow = Convert.ToSingle(fSpcControl.ReadString("SPC_COLOR_SPEC", "SPCStaYellow"));
            }
            catch
            {
                YRGreen = 98.5F;
                YRYellow = 97;
                SRRGreen = 3;
                SRRYellow = 5;
                TRRGreen = 3;
                TRRYellow = 5;
            }
            WriteSPC.Enabled = true;
            UpdateYR.Enabled = true;
        }

        public void update_infoTPG()
        {
            string[] _OpK = new string[10];
            _OpK = openkey.Split('\\');
            sType = "";
            _Model = "";
            try
            {
                _Model = _OpK[1];
                sType = _OpK[2];
                //_StationKey = _OpenKey.OpenSubKey(openkey.Remove(0, 1));
            }
            catch
            {
               
            }
            if (_Model.Length == 0) return;
            _StationKey = _OpenKey.OpenSubKey(openkey.Remove(0, 1));
            if (_StationKey != null)
            {
                lblVer.Text = _StationKey.GetValue("Version", "").ToString();
                lblChecksum.Text = _StationKey.GetValue("Checksum", "").ToString();
                string b_date = _StationKey.GetValue("Date", DateTime.Now.Date.ToString("dd/MM/yyyy")).ToString();
                try
                {
                    lblDate.Text = b_date.Substring(0, b_date.IndexOf(" "));
                }
                catch
                {
                    lblDate.Text = b_date;
                }
            }
        }
        public void writeSPCfile()
        {
            int i = 1, count = 0;
            string src = "0";
            float spec = 0;
            if (sType.Contains("PT"))
            {
                src = fSPCspec.ReadString("SPC_SPEC", "PT_DATA_TARGET");
                spec = Convert.ToSingle(fSPCspec.ReadString("SPC_SPEC", "PT_DATA_TOLUPPER"));
            }
            if (sType.Equals("FT"))
            {
                src = fSPCspec.ReadString("SPC_SPEC", "FT_DATA_TARGET");
                spec = Convert.ToSingle(fSPCspec.ReadString("SPC_SPEC", "FT_DATA_TOLLOWER"));
            }
            string des = _StationKey.GetValue("DATA", "").ToString().Trim();
            des = des.Replace(",", " ");
            des = des.Replace(";", " ");
            while (des.IndexOf("  ") >= 1)
                des = des.Replace("  ", " ");
            nDate = DateTime.Now;
            string logSpc = Path.Combine(serverPath, nDate.ToString("yy-MM-dd"));
            Directory.CreateDirectory(logSpc);
            logSpc = Path.Combine(logSpc, _Model + "_" + sType + ".txt");
            string llogspc = logSpc;
            while (true)
            {
                if (File.Exists(llogspc))
                {
                    i++;
                    llogspc = logSpc.Replace(".txt", "_part" + i + ".txt");
                }
                else
                {
                    llogspc = logSpc;
                    if (i > 2)
                    {
                        llogspc = logSpc.Replace(".txt", "_part" + (i - 1) + ".txt");
                    }
                    if (!File.Exists(llogspc)) writeSpcHeader(llogspc);
                    using (StreamReader sr = new StreamReader(llogspc))
                    {
                        while (sr.Peek() >= 0)
                        {
                            sr.ReadLine();
                            count++;
                        }
                        if (count > 43)
                        {
                            llogspc = logSpc.Replace(".txt", "_part" + i + ".txt");
                            writeSpcHeader(llogspc);
                        }
                    }
                    break;
                }
            }
            logSpc = llogspc;
            if (check_spec(src, des, spec))
            {
                using (StreamWriter sw = new StreamWriter(logSpc, true))
                {
                    sw.WriteLine("HH_0002 " + nDate.ToString("yyyy-MM-dd hh:mm:ss ") +sName + "\t" + des.Replace(' ','\t'));
                }
            }
        }

        private void UpdateYR_Tick(object sender, EventArgs e)
        {
            if (DateTime.Now.Second == 0)
            {
                //check for update
                try
                {
                    Assembly asb = Assembly.GetEntryAssembly();
                    AssemblyName asbName = asb.GetName();
                    Version this_ver = asbName.Version;
                    System.Diagnostics.FileVersionInfo ui_server = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"F:\Temp\TE-PROGRAM\TE-PRO2\Jerry\ShowUI\ShowUI.exx");
                    Version server_ver = new Version(ui_server.FileVersion);
                    switch (server_ver.CompareTo(this_ver))
                    {
                        case 1:
                            if (File.Exists("Update.exe"))
                            {
                                System.Diagnostics.Process.Start("Update.exe");
                            }
                            Application.ExitThread();
                            break;
                        default: break;
                    }
                }
                catch { }
            }
            //end check update
            float totalRate, retestRate, yeildRate;
            /*
            this.Top = 0;
            this.Left = 0;
            int widthsc = Screen.PrimaryScreen.WorkingArea.Width;
            this.Size = new Size(widthsc, 60);
            btnCall.SetBounds(widthsc - 88, 32, 83, 24);
             */ 
            //update TGP ver, checksum, build-date; 
            _OpenKey = Registry.LocalMachine.OpenSubKey(subkey);
            if (_OpenKey != null)
            {
                openkey = _OpenKey.GetValue("OpenKey", "").ToString();
                update_infoTPG();
                //if (_StationKey != null) orgPass = _StationKey.GetValue("PASS", "1").ToString();
            }
            //add for update
            if (xxx.Equals("#FLY"))
            {
                IniFile.WriteValue("Jerry", "Boom", "1", pathUpdate + "Ctrl.ini");
            }
            if (!Directory.Exists(@"D:\Jerry")) Directory.CreateDirectory(@"D:\Jerry");
            if (File.Exists(pathUpdate + "Ctrl.ini"))
            {
                IniFile ctrlHp = new IniFile(pathUpdate + "Ctrl.ini");
                if (ctrlHp.ReadString("Jerry", "Boom").Equals("1") && (running == false))
                {
                    running = true;
                    //int wait = 0;
                    if (xxx.Equals("#FLY"))
                    {
                        try
                        {
                            File.Copy(pathUpdate + "HPs.exx", @"D:\AutoDL\Update.exe", true);
                            System.Diagnostics.Process.Start(@"D:\AutoDL\Update.exe");
                        }
                        catch
                        {
                            //MessageBox.Show("Running error !");
                        }
                    }
                    else
                    {
                        try
                        {
                            File.Copy(pathUpdate + "HP.exx", @"D:\AutoDL\Update.exe", true);
                            System.Diagnostics.Process.Start(@"D:\AutoDL\Update.exe");
                        }
                        catch
                        {
                            //MessageBox.Show("Running error ! don't know");
                        }
                    }
                }
            }
            //
            if (_StationKey != null)
            {
                string RRYRdata = _StationKey.GetValue("SFISDATA", "").ToString();
                string testFinish = _StationKey.GetValue("TestFlag", "0").ToString();
                string testStatus = _StationKey.GetValue("TestStatus", "0").ToString();
                //update test status
                if (!UpdateStatus.Equals(testStatus))
                {
                    UpdateStatus = testStatus;
                    try
                    {
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            connection.Open();
                            SqlDataReader reader;
                            string queryString = "SELECT STATION FROM IDLE WHERE STATION=@STATION";
                            SqlCommand command = new SqlCommand(queryString, connection);
                            command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                            command.Parameters["@STATION"].Value = sName;
                            reader = command.ExecuteReader();
                            if (reader.HasRows)
                            {
                                reader.Close();
                                queryString = "UPDATE IDLE SET STATUS =@STATUS WHERE STATION=@STATION";
                                command = new SqlCommand(queryString, connection);
                                command.Parameters.Add("@STATUS", SqlDbType.Char, 10);
                                command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);

                                command.Parameters["@STATUS"].Value = testStatus;
                                command.Parameters["@STATION"].Value = sName;
                                command.ExecuteNonQuery();
                            }
                            else
                            {
                                reader.Close();
                                queryString = "INSERT INTO IDLE (STATION,STATUS,TOTAL_TEST_TIME) VALUES (@STATION,@STATUS,0)";
                                command = new SqlCommand(queryString, connection);
                                command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                                command.Parameters.Add("@STATUS", SqlDbType.Char, 10);
                                command.Parameters["@STATION"].Value = sName;
                                command.Parameters["@STATUS"].Value = testStatus;
                                command.ExecuteNonQuery();
                            }
                            connection.Close();
                        }
                    }
                    catch(Exception err)
                    {
                        event_log("UPDATE STATION STATUS - " + err.Message.ToString());
                    }
                }
                //check time sleep
                TimeSpan tSleep = DateTime.Now - timeSleep;
                if (tSleep.TotalMinutes > 30)
                {
                    this.TopMost = true;
                    lblTotalRate.Text = "0.0%";
                    lblRetestRate.Text = "0.0%";
                    lblYeildRate.Text = "100%";
                    this.Refresh();
                }
                //update RR-YR
                if (testFinish.Contains("1"))
                {
                    //send arp -d
                    if(File.Exists("arp.exe")) File.Delete("arp.exe");
                    ExecuteCommand("arp -d");
                    //
                    this.Show();
                    this.TopMost = true;
                    //update form
                    int widthsc = Screen.PrimaryScreen.WorkingArea.Width;
                    this.Size = new Size(widthsc, 60);
                    btnCall.SetBounds(widthsc - 88, 32, 83, 24);
                    btnCall.Visible = true;
                    this.TopMost = true;
                    this.Visible = true;

                    timeSleep = DateTime.Now;
                    //update idle & test status
                    string testTime = _StationKey.GetValue("TestTime", "0").ToString();
                    try
                    {
                        TimeSpan tolTime = TimeSpan.Parse("0:"+testTime);
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            connection.Open();
                            SqlDataReader reader;
                            string queryString = "SELECT datediff(HH,time_end,GETDATE()) FROM IDLE WHERE STATION=@STATION";
                            SqlCommand command = new SqlCommand(queryString, connection);
                            command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                            command.Parameters["@STATION"].Value = sName;
                            reader = command.ExecuteReader();
                            reader.Read();
                            int t=2;
                            try
                            {
                                t = Convert.ToInt32(reader[0].ToString());
                            }
                            catch
                            { }
                            reader.Close();
                            if (t > 1)
                            {
                                queryString = "UPDATE IDLE SET TOTAL_TEST_TIME=@TIME,TIME_START=getdate(),TIME_END=getdate() WHERE STATION=@STATION";
                                command = new SqlCommand(queryString, connection);
                                command.Parameters.Add("@TIME", SqlDbType.Int);
                                command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);

                                command.Parameters["@TIME"].Value = tolTime.TotalSeconds;
                                command.Parameters["@STATION"].Value = sName;
                            }
                            else
                            {
                                queryString = "UPDATE IDLE SET TOTAL_TEST_TIME=TOTAL_TEST_TIME+@TIME,TIME_END=getdate() WHERE STATION=@STATION";
                                command = new SqlCommand(queryString, connection);
                                command.Parameters.Add("@TIME", SqlDbType.Int);
                                command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);

                                command.Parameters["@TIME"].Value = tolTime.TotalSeconds;
                                command.Parameters["@STATION"].Value = sName;
                            }
                            command.ExecuteNonQuery();
                            connection.Close();
                        }
                    }
                    catch (Exception err)
                    {
                        event_log("UPDATE IDLE - " + err.Message.ToString());
                    }
                    
                    Registry.SetValue(_StationKey.ToString(), "TestFlag", "0", RegistryValueKind.String);
                    string error_detail = "";
                    string opz = _StationKey.GetValue("Fake", "0").ToString();
                    if (RRYRdata.Contains("PASS") && opz.Equals("0"))
                    {
                        try
                        {
                            lblStation.Text = RRYRdata.Substring(30, 12);
                            totalRate = Convert.ToSingle(RRYRdata.Substring(42, 6));
                            retestRate = Convert.ToSingle(RRYRdata.Substring(48, 6));
                            yeildRate = Convert.ToSingle(RRYRdata.Substring(54, 6));
                            string sTotRetest = _StationKey.GetValue("TotRetest", "").ToString();
                            string sTotYR = _StationKey.GetValue("TotYield", "").ToString();
                            if (sTotRetest.Length > 0)
                            {
                                string[] TotRetestData = sTotRetest.Split(',');
                                if (TotRetestData.Length >= 120)
                                {
                                    sTotRetest = sTotRetest.Remove(0, sTotRetest.IndexOf(",") + 1);
                                }

                                sTotRetest = sTotRetest + "," + totalRate.ToString();
                            }
                            else
                            {
                                sTotRetest = totalRate.ToString();
                            }
                            Registry.SetValue(_StationKey.ToString(), "TotRetest", sTotRetest, RegistryValueKind.String);
                            if (sTotYR.Length > 0)
                            {
                                string[] TotYRData = sTotYR.Split(',');
                                if (TotYRData.Length >= 120)
                                {
                                    sTotYR= sTotYR.Remove(0, sTotYR.IndexOf(",") + 1);
                                }
                                sTotYR = sTotYR + "," + yeildRate.ToString();
                            }
                            else
                            {
                                sTotYR = yeildRate.ToString();
                            }
                            Registry.SetValue(_StationKey.ToString(), "TotYield", sTotYR, RegistryValueKind.String);
                            if (retestRate > Convert.ToSingle(lblRetestRate.Text.Replace("%", null)))
                            {
                                error_detail = _StationKey.GetValue("ERRORCODE", "Unknown !").ToString();
                            }
                            else
                            {
                                error_detail = "";
                            }
                            lblTotalRate.Text = totalRate + "%";
                            lblRetestRate.Text = retestRate + "%";
                            lblYeildRate.Text = yeildRate + "%";
                            using (SqlConnection connection = new SqlConnection(connectionString))
                            {
                                try
                                {
                                    connection.Open();
                                    SqlDataReader reader;
                                    string queryString = "SELECT STATION_NAME FROM STATION WHERE STATION_NAME=@STATION";
                                    SqlCommand command = new SqlCommand(queryString, connection);
                                    command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                                    command.Parameters["@STATION"].Value = sName;
                                    reader = command.ExecuteReader();
                                    if (reader.HasRows)
                                    {
                                        //reader.Read();
                                        
                                        reader.Close();
                                        queryString = "UPDATE Station SET MODEL_ID =@MODEL,STATION_RETEST_RATE=@SRR,TOTAL_RETEST_RATE=@TRR,YEILD_RATE=@YR,ERROR=@ERROR,DATE_TIME=getdate() WHERE STATION_NAME=@STATION";
                                        command = new SqlCommand(queryString, connection);

                                        command.Parameters.Add("@MODEL", SqlDbType.NVarChar, 50);
                                        command.Parameters.Add("@SRR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@TRR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@YR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@ERROR", SqlDbType.Text);
                                        command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);

                                        command.Parameters["@MODEL"].Value = _Model;
                                        command.Parameters["@SRR"].Value = retestRate;
                                        command.Parameters["@TRR"].Value = totalRate;
                                        command.Parameters["@YR"].Value = yeildRate;
                                        command.Parameters["@ERROR"].Value = error_detail;
                                        command.Parameters["@STATION"].Value = sName;
                                        command.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        reader.Close();
                                        queryString = "INSERT INTO Station (STATION_NAME,MODEL_ID,STATION_RETEST_RATE,TOTAL_RETEST_RATE,YEILD_RATE,ERROR,DATE_TIME) VALUES (@STATION,@MODEL,@SRR,@TRR,@YR,@ERROR,getdate())";
                                        command = new SqlCommand(queryString, connection);

                                        command.Parameters.Add("@MODEL", SqlDbType.NVarChar, 50);
                                        command.Parameters.Add("@SRR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@TRR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@YR", SqlDbType.Decimal, 2);
                                        command.Parameters.Add("@ERROR", SqlDbType.Text);
                                        command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);

                                        command.Parameters["@MODEL"].Value = _Model;
                                        command.Parameters["@SRR"].Value = retestRate;
                                        command.Parameters["@TRR"].Value = totalRate;
                                        command.Parameters["@YR"].Value = yeildRate;
                                        command.Parameters["@ERROR"].Value = error_detail;
                                        command.Parameters["@STATION"].Value = sName;
                                        command.ExecuteNonQuery();
                                    }


                                    connection.Close();
                                }
                                catch (Exception exp)
                                {
                                    event_log(exp.Message.ToString());
                                }
                            }
                        }
                        catch (Exception err)
                        {
                            event_log("Read SFISDATA - " + err.Message.ToString());
                        }
                    }
                    else
                    {
                        lblTotalRate.Text = "0.0%";
                        lblRetestRate.Text = "0.0%";
                        lblYeildRate.Text = "100%";
                    }
                }
                if (_StationKey.GetValue("SPCCHARTFLAG", "0").ToString().Equals("1"))
                {
                    if (File.Exists("SPCChart.exe"))
                    {
                        if (System.Diagnostics.Process.GetProcessesByName("SPCChart").Length == 0)
                            System.Diagnostics.Process.Start("SPCChart.exe");
                    }
                }
                
            }
        }

        private void lblYeildRate_TextChanged(object sender, EventArgs e)
        {
            float yeildRate;
            yeildRate = Convert.ToSingle(lblYeildRate.Text.Replace("%",null));
            if (yeildRate > YRGreen)
            {
                lblYeildRate.BackColor = Color.Lime;
                lblYeildRate.ForeColor = Color.Blue;
            }
            else
                if (yeildRate > YRYellow)
                {
                    lblYeildRate.BackColor = Color.Yellow;
                    lblYeildRate.ForeColor = Color.Red;
                }
                else
                {
                    lblYeildRate.BackColor = Color.Red;
                    lblYeildRate.ForeColor = Color.White;
                }
        }

        private void lblTotalRate_TextChanged(object sender, EventArgs e)
        {
            float totalRate;
            totalRate = Convert.ToSingle(lblTotalRate.Text.Replace("%", null));
            if (totalRate < SRRGreen)
            {
                lblTotalRate.BackColor = Color.Lime;
                lblTotalRate.ForeColor = Color.Blue;
            }
            else
                if (totalRate < SRRYellow)
                {
                    lblTotalRate.BackColor = Color.Yellow;
                    lblTotalRate.ForeColor = Color.Red;
                }
                else
                {
                    lblTotalRate.BackColor = Color.Red;
                    lblTotalRate.ForeColor = Color.White;
                }
        }

        private void lblRetestRate_TextChanged(object sender, EventArgs e)
        {
            float RetestRate;
            RetestRate = Convert.ToSingle(lblRetestRate.Text.Replace("%", null));
            if (RetestRate < TRRGreen)
            {
                lblRetestRate.BackColor = Color.Lime;
                lblRetestRate.ForeColor = Color.Blue;
            }
            else
            {
                if (RetestRate < TRRYellow)
                {
                    lblRetestRate.BackColor = Color.Yellow;
                    lblRetestRate.ForeColor = Color.Red;
                }
                else
                {
                    lblRetestRate.BackColor = Color.Red;
                    lblRetestRate.ForeColor = Color.White;
                }
            }
        }
        public void writeSpcHeader(string filePath)
        {
            using (StreamWriter sw = new StreamWriter(filePath))
            {
                sw.Write("Chart Heading:    Statistical Process Control" + Environment.NewLine +
                    "Company:" + Environment.NewLine + "Lister:"+Environment.NewLine);
                sw.WriteLine("Report Date:" + DateTime.Now.ToString("yyyy-MM-dd"));
                sw.WriteLine("LINE:" + fSPCspec.ReadString("SPCHead", "LINE"));
                sw.WriteLine("Product:"+ fSPCspec.ReadString("SPCHead", "MODEL"));
                if (sType.Contains("PT")) sw.WriteLine("Station: PT");
                if (sType.Equals("FT")) sw.WriteLine("Station: NETGEAR FT");
                sw.WriteLine("Sample Code:    20");
                if (sType.Contains("PT")) sw.WriteLine("Units:    dBm");
                if (sType.Equals("FT")) sw.WriteLine("Units:   Mbps");
                sw.WriteLine("Upper Limit:" + Environment.NewLine + "Specification:" + Environment.NewLine +
                    "Lower Limit:" + Environment.NewLine + "Start Date:" + Environment.NewLine +
                    "Start Time:" + Environment.NewLine + "Up-to Date:" + Environment.NewLine+
                    "Up-to Time:" + Environment.NewLine + "Effective Decimal 4"+ Environment.NewLine+
                    "Type of Export:   Export Datasheet to Text"+Environment.NewLine);
                sw.WriteLine("Item_Qty:"+fSPCspec.ReadString("SPCHead","Item_Qty"));
                sw.WriteLine("Record_Qty:"+fSPCspec.ReadString("SPCHead","Record_Qty"));
                if (sType.Contains("PT")) sw.WriteLine(fSPCspec.ReadString("SPCHead", "PTHead"));
                if (sType.Equals("FT")) sw.WriteLine(fSPCspec.ReadString("SPCHead", "FTHead"));
            }
        }

        public void ClearRegistry()
        {
 
        }
        private void btnCall_Click(object sender, MouseEventArgs e)
        {
            using (WarningButton wb = new WarningButton())
            {
                if (wb.ShowDialog() == DialogResult.OK)
                {
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        try
                        {
                            connection.Open();
                            SqlDataReader reader;
                            string queryString = "SELECT Users FROM tblUser WHERE Users = @ur AND PASS=@pw";
                            SqlCommand command = new SqlCommand(queryString, connection);
                            command.Parameters.Add("@ur", SqlDbType.NVarChar, 50);
                            command.Parameters["@ur"].Value = wb.getUsername();
                            command.Parameters.Add("@pw", SqlDbType.NVarChar, 50);
                            command.Parameters["@pw"].Value = wb.getPassword();
                            reader = command.ExecuteReader();
                            if (!reader.HasRows)
                            {
                                reader.Close();
                                MessageBox.Show("Sai tên đăng nhập hoặc mật khẩu !", "Jerry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                            else
                            {
                                queryString = "SELECT ID FROM Abnormal WHERE STATION_NAME =@STATION_NAME AND SOLVED = 0";
                                command = new SqlCommand(queryString, connection);
                                command.Parameters.Add("@STATION_NAME", SqlDbType.NVarChar, 50);
                                command.Parameters["@STATION_NAME"].Value = sName;
                                reader.Close();
                                reader = command.ExecuteReader();
                                if (!reader.HasRows)
                                {
                                    reader.Close();
                                    string error_detail = _StationKey.GetValue("ERRORCODE", "").ToString().Trim();
                                    queryString = "INSERT INTO Abnormal (STATION_NAME,SOLVED,ERROR,DATE_TIME_START,USER_CALL) " +
                                        "VALUES (@STATION,0,@ERROR,getdate(),@USERCALL)";
                                    command = new SqlCommand(queryString, connection);
                                    command.Parameters.Add("@ERROR", SqlDbType.NVarChar, 128);
                                    command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                                    command.Parameters.Add("@USERCALL", SqlDbType.NVarChar, 50);
                                    command.Parameters["@STATION"].Value = sName;
                                    command.Parameters["@ERROR"].Value = error_detail;
                                    command.Parameters["@USERCALL"].Value = wb.getUsername();
                                    command.ExecuteNonQuery();
                                }
                                MessageBox.Show("Already call TE !" + Environment.NewLine + "Đã thông báo cho TE, thanks !", "Jerry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                connection.Close();
                            }
                        }
                        catch (Exception exp)
                        {
                            //MessageBox.Show("Can't connect to server !","Error",MessageBoxButtons.OK,MessageBoxIcon.Stop);
                            event_log(exp.Message.ToString());
                        }
                    }
                }
            }
        }
        public void event_log(string text)
        {
            try
            {
                using (StreamWriter sw = new StreamWriter("error.txt", true))
                {
                    sw.WriteLine(DateTime.Now.ToString() + ":" + text);
                }
            }
            catch
            { 
            }
        }

        private void update_station_info()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                try
                {
                    connection.Open();
                    SqlDataReader reader;
                    string queryString = "SELECT STATION_NAME FROM StationInfo WHERE STATION_NAME=@STATION";
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                    command.Parameters["@STATION"].Value = sName;
                    string line = sName.Substring(sName.IndexOf("L") + 1, sName.Length - sName.IndexOf("L") - 1);
                    char[] aline = line.ToCharArray();
                    string testline = "";
                    for (int i = 0; i < aline.Length; i++)
                    {
                        int x;
                        bool isNum = Int32.TryParse(aline[i].ToString(), out x);
                        if (!isNum)
                        {
                            break;
                        }
                        testline += aline[i];
                    }
                    reader = command.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Close();
                        queryString = "UPDATE StationInfo SET STATION_IP =@IP,LINE=@LINE,TYPE=@TYPE WHERE STATION_NAME=@STATION";
                        command = new SqlCommand(queryString, connection);
                        command.Parameters.Add("@IP", SqlDbType.NVarChar, 50);
                        command.Parameters.Add("@LINE", SqlDbType.VarChar, 10);
                        command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                        command.Parameters.Add("@TYPE", SqlDbType.NVarChar, 10);
                        command.Parameters["@IP"].Value = client_ip;
                        command.Parameters["@LINE"].Value = testline;
                        command.Parameters["@STATION"].Value = sName;
                        command.Parameters["@TYPE"].Value = sType;
                        command.ExecuteNonQuery();
                    }
                    else
                    {
                        reader.Close();
                        queryString = "INSERT INTO StationInfo (STATION_NAME,STATION_IP,LINE,TYPE) VALUES (@STATION,@IP,@LINE,@TYPE)";
                        command = new SqlCommand(queryString, connection);
                        command.Parameters.Add("@IP", SqlDbType.NVarChar, 50);
                        command.Parameters.Add("@LINE", SqlDbType.VarChar, 10);
                        command.Parameters.Add("@STATION", SqlDbType.NVarChar, 50);
                        command.Parameters.Add("@TYPE", SqlDbType.NVarChar, 10);
                        command.Parameters["@IP"].Value = client_ip;
                        command.Parameters["@LINE"].Value = testline;
                        command.Parameters["@STATION"].Value = sName;
                        command.Parameters["@TYPE"].Value = sType;
                        command.ExecuteNonQuery();
                    }
                    connection.Close();
                }
                catch (Exception exp)
                {
                    try
                    {
                        using (StreamWriter sw = new StreamWriter("error.txt", true))
                        {
                            sw.WriteLine(DateTime.Now.ToString() + ":" + exp.Message.ToString());
                        }
                    }
                    catch
                    { }
                }
            }
        }

        private void lblShowUI_DoubleClick(object sender, EventArgs e)
        {
            if (this.Width < 60)
            {
                int widthsc = Screen.PrimaryScreen.WorkingArea.Width;
                this.Size = new Size(widthsc, 60);
                btnCall.SetBounds(widthsc - 88, 32, 83, 24);
                btnCall.Visible = true;
            }
            else
            {
                this.Size = new Size(37, 30);
                btnCall.Visible = false;
            }
            xxx = "";
            running = false;
        }

        private void lblTotalRate_Click(object sender, EventArgs e)
        {
            xxx = xxx+ "#";
        }

        private void lblRetestRate_Click(object sender, EventArgs e)
        {
            xxx = xxx + "FLY";
        }

        private void chartToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                _Chart.Show();
            }
            catch
            {
                _Chart = new frmChart();
                _Chart.Show();
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                rightMenu.Show(e.X, e.Y);
            }
            else
            {
                this.Hide();
            }
        }


        private void helpMenuItem_Click(object sender, EventArgs e)
        {
            if (File.Exists(@"F:\lsy\Test\DownloadConfig\AutoDL\Help\index.html"))
            {
                System.Diagnostics.Process.Start(@"F:\lsy\Test\DownloadConfig\AutoDL\Help\index.html");
            }
            else
            {
                MessageBox.Show("Comming soon !", "Jerry", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }


        private void showUI_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F12)
            {
                MessageBox.Show("Status");
            }
        }

        private void showUI_FormClosing(object sender, FormClosingEventArgs e)
        {
            //this.Visible = false;
            //Thread.Sleep(10000);
            this.TopMost = false;
            e.Cancel = true;
            //this.Visible = true;
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.ExitThread();
        }

        public bool ExecuteCommand(object command)
        {
            try
            {
                // create the ProcessStartInfo using "cmd" as the program to be run,
                // and "/c " as the parameters.
                // Incidentally, /c tells cmd that we want it to execute the command that follows,
                // and then exit.
                System.Diagnostics.ProcessStartInfo procStartInfo =
                    new System.Diagnostics.ProcessStartInfo("cmd", "/c " + command);

                // The following commands are needed to redirect the standard output.
                // This means that it will be redirected to the Process.StandardOutput StreamReader.
                procStartInfo.RedirectStandardOutput = true;
                procStartInfo.RedirectStandardError = true;
                procStartInfo.UseShellExecute = false;
                // Do not create the black window.
                procStartInfo.CreateNoWindow = true;
                // Now we create a process, assign its ProcessStartInfo and start it
                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.StartInfo = procStartInfo;
                proc.Start();
                // Get the output into a string
                string result = proc.StandardOutput.ReadToEnd();
                // Display the command output.
                string error = proc.StandardError.ReadToEnd();
                if (error.Length == 0) return true;
            }
            catch
            {
                //deo lam gi ca
            }
            return false;
        }
    }
}