//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ShowUI.ATE_CHECKLIST {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertChecklistATEOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateATEWirelessFromTPGOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectorsUseTimesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectorsUseTimes_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback FixtureControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_trusted_urlOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_trusted_ticketOperationCompleted;
        
        private System.Threading.SendOrPostCallback generateTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_E_GroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListGroupIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListTypeDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIsCheckedATEChecklistOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTPGVersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::ShowUI.Properties.Settings.Default.ShowUI4_6_ATE_CHECKLIST_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertChecklistATECompletedEventHandler InsertChecklistATECompleted;
        
        /// <remarks/>
        public event UpdateATEWirelessFromTPGCompletedEventHandler UpdateATEWirelessFromTPGCompleted;
        
        /// <remarks/>
        public event ConnectorsUseTimesCompletedEventHandler ConnectorsUseTimesCompleted;
        
        /// <remarks/>
        public event ConnectorsUseTimes_NewCompletedEventHandler ConnectorsUseTimes_NewCompleted;
        
        /// <remarks/>
        public event FixtureControlCompletedEventHandler FixtureControlCompleted;
        
        /// <remarks/>
        public event get_trusted_urlCompletedEventHandler get_trusted_urlCompleted;
        
        /// <remarks/>
        public event get_trusted_ticketCompletedEventHandler get_trusted_ticketCompleted;
        
        /// <remarks/>
        public event generateTicketCompletedEventHandler generateTicketCompleted;
        
        /// <remarks/>
        public event SearchSNCompletedEventHandler SearchSNCompleted;
        
        /// <remarks/>
        public event Insert_E_GroupCompletedEventHandler Insert_E_GroupCompleted;
        
        /// <remarks/>
        public event GetListGroupIDCompletedEventHandler GetListGroupIDCompleted;
        
        /// <remarks/>
        public event GetListTypeDevicesCompletedEventHandler GetListTypeDevicesCompleted;
        
        /// <remarks/>
        public event CheckIsCheckedATEChecklistCompletedEventHandler CheckIsCheckedATEChecklistCompleted;
        
        /// <remarks/>
        public event CheckTPGVersionCompletedEventHandler CheckTPGVersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertChecklistATE", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertChecklistATE(string Linename, string ModelName, string Station, string Shift, string ProgramandVersion, string CheckSum, string FixtureNo, string UpdateVirust, string Datetime) {
            object[] results = this.Invoke("InsertChecklistATE", new object[] {
                        Linename,
                        ModelName,
                        Station,
                        Shift,
                        ProgramandVersion,
                        CheckSum,
                        FixtureNo,
                        UpdateVirust,
                        Datetime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertChecklistATEAsync(string Linename, string ModelName, string Station, string Shift, string ProgramandVersion, string CheckSum, string FixtureNo, string UpdateVirust, string Datetime) {
            this.InsertChecklistATEAsync(Linename, ModelName, Station, Shift, ProgramandVersion, CheckSum, FixtureNo, UpdateVirust, Datetime, null);
        }
        
        /// <remarks/>
        public void InsertChecklistATEAsync(string Linename, string ModelName, string Station, string Shift, string ProgramandVersion, string CheckSum, string FixtureNo, string UpdateVirust, string Datetime, object userState) {
            if ((this.InsertChecklistATEOperationCompleted == null)) {
                this.InsertChecklistATEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertChecklistATEOperationCompleted);
            }
            this.InvokeAsync("InsertChecklistATE", new object[] {
                        Linename,
                        ModelName,
                        Station,
                        Shift,
                        ProgramandVersion,
                        CheckSum,
                        FixtureNo,
                        UpdateVirust,
                        Datetime}, this.InsertChecklistATEOperationCompleted, userState);
        }
        
        private void OnInsertChecklistATEOperationCompleted(object arg) {
            if ((this.InsertChecklistATECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertChecklistATECompleted(this, new InsertChecklistATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateATEWirelessFromTPG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateATEWirelessFromTPG(string modelname, string version, string Checksum, string Station, string DateOnline) {
            object[] results = this.Invoke("UpdateATEWirelessFromTPG", new object[] {
                        modelname,
                        version,
                        Checksum,
                        Station,
                        DateOnline});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateATEWirelessFromTPGAsync(string modelname, string version, string Checksum, string Station, string DateOnline) {
            this.UpdateATEWirelessFromTPGAsync(modelname, version, Checksum, Station, DateOnline, null);
        }
        
        /// <remarks/>
        public void UpdateATEWirelessFromTPGAsync(string modelname, string version, string Checksum, string Station, string DateOnline, object userState) {
            if ((this.UpdateATEWirelessFromTPGOperationCompleted == null)) {
                this.UpdateATEWirelessFromTPGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateATEWirelessFromTPGOperationCompleted);
            }
            this.InvokeAsync("UpdateATEWirelessFromTPG", new object[] {
                        modelname,
                        version,
                        Checksum,
                        Station,
                        DateOnline}, this.UpdateATEWirelessFromTPGOperationCompleted, userState);
        }
        
        private void OnUpdateATEWirelessFromTPGOperationCompleted(object arg) {
            if ((this.UpdateATEWirelessFromTPGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateATEWirelessFromTPGCompleted(this, new UpdateATEWirelessFromTPGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConnectorsUseTimes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] ConnectorsUseTimes(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange) {
            object[] results = this.Invoke("ConnectorsUseTimes", new object[] {
                        MainInfo,
                        CableName,
                        CableUseTimes,
                        CableSpec,
                        ResetCableUsingTimes,
                        EmployeeID,
                        TypeChange,
                        ReasonChange});
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void ConnectorsUseTimesAsync(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange) {
            this.ConnectorsUseTimesAsync(MainInfo, CableName, CableUseTimes, CableSpec, ResetCableUsingTimes, EmployeeID, TypeChange, ReasonChange, null);
        }
        
        /// <remarks/>
        public void ConnectorsUseTimesAsync(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange, object userState) {
            if ((this.ConnectorsUseTimesOperationCompleted == null)) {
                this.ConnectorsUseTimesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectorsUseTimesOperationCompleted);
            }
            this.InvokeAsync("ConnectorsUseTimes", new object[] {
                        MainInfo,
                        CableName,
                        CableUseTimes,
                        CableSpec,
                        ResetCableUsingTimes,
                        EmployeeID,
                        TypeChange,
                        ReasonChange}, this.ConnectorsUseTimesOperationCompleted, userState);
        }
        
        private void OnConnectorsUseTimesOperationCompleted(object arg) {
            if ((this.ConnectorsUseTimesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectorsUseTimesCompleted(this, new ConnectorsUseTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConnectorsUseTimes_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] ConnectorsUseTimes_New(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange, string Cable_ID) {
            object[] results = this.Invoke("ConnectorsUseTimes_New", new object[] {
                        MainInfo,
                        CableName,
                        CableUseTimes,
                        CableSpec,
                        ResetCableUsingTimes,
                        EmployeeID,
                        TypeChange,
                        ReasonChange,
                        Cable_ID});
            return ((double[])(results[0]));
        }
        
        /// <remarks/>
        public void ConnectorsUseTimes_NewAsync(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange, string Cable_ID) {
            this.ConnectorsUseTimes_NewAsync(MainInfo, CableName, CableUseTimes, CableSpec, ResetCableUsingTimes, EmployeeID, TypeChange, ReasonChange, Cable_ID, null);
        }
        
        /// <remarks/>
        public void ConnectorsUseTimes_NewAsync(string[] MainInfo, string[] CableName, double[] CableUseTimes, string[] CableSpec, int ResetCableUsingTimes, string EmployeeID, string TypeChange, string ReasonChange, string Cable_ID, object userState) {
            if ((this.ConnectorsUseTimes_NewOperationCompleted == null)) {
                this.ConnectorsUseTimes_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectorsUseTimes_NewOperationCompleted);
            }
            this.InvokeAsync("ConnectorsUseTimes_New", new object[] {
                        MainInfo,
                        CableName,
                        CableUseTimes,
                        CableSpec,
                        ResetCableUsingTimes,
                        EmployeeID,
                        TypeChange,
                        ReasonChange,
                        Cable_ID}, this.ConnectorsUseTimes_NewOperationCompleted, userState);
        }
        
        private void OnConnectorsUseTimes_NewOperationCompleted(object arg) {
            if ((this.ConnectorsUseTimes_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectorsUseTimes_NewCompleted(this, new ConnectorsUseTimes_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FixtureControl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FixtureControl(string model_name, string product_name, string station_name, string fixtureSN) {
            object[] results = this.Invoke("FixtureControl", new object[] {
                        model_name,
                        product_name,
                        station_name,
                        fixtureSN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FixtureControlAsync(string model_name, string product_name, string station_name, string fixtureSN) {
            this.FixtureControlAsync(model_name, product_name, station_name, fixtureSN, null);
        }
        
        /// <remarks/>
        public void FixtureControlAsync(string model_name, string product_name, string station_name, string fixtureSN, object userState) {
            if ((this.FixtureControlOperationCompleted == null)) {
                this.FixtureControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFixtureControlOperationCompleted);
            }
            this.InvokeAsync("FixtureControl", new object[] {
                        model_name,
                        product_name,
                        station_name,
                        fixtureSN}, this.FixtureControlOperationCompleted, userState);
        }
        
        private void OnFixtureControlOperationCompleted(object arg) {
            if ((this.FixtureControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FixtureControlCompleted(this, new FixtureControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/get_trusted_url", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string get_trusted_url(string user, string server, string view_url) {
            object[] results = this.Invoke("get_trusted_url", new object[] {
                        user,
                        server,
                        view_url});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_trusted_urlAsync(string user, string server, string view_url) {
            this.get_trusted_urlAsync(user, server, view_url, null);
        }
        
        /// <remarks/>
        public void get_trusted_urlAsync(string user, string server, string view_url, object userState) {
            if ((this.get_trusted_urlOperationCompleted == null)) {
                this.get_trusted_urlOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_trusted_urlOperationCompleted);
            }
            this.InvokeAsync("get_trusted_url", new object[] {
                        user,
                        server,
                        view_url}, this.get_trusted_urlOperationCompleted, userState);
        }
        
        private void Onget_trusted_urlOperationCompleted(object arg) {
            if ((this.get_trusted_urlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_trusted_urlCompleted(this, new get_trusted_urlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/get_trusted_ticket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string get_trusted_ticket(string wgserver, string user, string remote_addr) {
            object[] results = this.Invoke("get_trusted_ticket", new object[] {
                        wgserver,
                        user,
                        remote_addr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_trusted_ticketAsync(string wgserver, string user, string remote_addr) {
            this.get_trusted_ticketAsync(wgserver, user, remote_addr, null);
        }
        
        /// <remarks/>
        public void get_trusted_ticketAsync(string wgserver, string user, string remote_addr, object userState) {
            if ((this.get_trusted_ticketOperationCompleted == null)) {
                this.get_trusted_ticketOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_trusted_ticketOperationCompleted);
            }
            this.InvokeAsync("get_trusted_ticket", new object[] {
                        wgserver,
                        user,
                        remote_addr}, this.get_trusted_ticketOperationCompleted, userState);
        }
        
        private void Onget_trusted_ticketOperationCompleted(object arg) {
            if ((this.get_trusted_ticketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_trusted_ticketCompleted(this, new get_trusted_ticketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/generateTicket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string generateTicket(string view_path) {
            object[] results = this.Invoke("generateTicket", new object[] {
                        view_path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void generateTicketAsync(string view_path) {
            this.generateTicketAsync(view_path, null);
        }
        
        /// <remarks/>
        public void generateTicketAsync(string view_path, object userState) {
            if ((this.generateTicketOperationCompleted == null)) {
                this.generateTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateTicketOperationCompleted);
            }
            this.InvokeAsync("generateTicket", new object[] {
                        view_path}, this.generateTicketOperationCompleted, userState);
        }
        
        private void OngenerateTicketOperationCompleted(object arg) {
            if ((this.generateTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateTicketCompleted(this, new generateTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchSN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SearchSN(string SN, string TYPE) {
            object[] results = this.Invoke("SearchSN", new object[] {
                        SN,
                        TYPE});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SearchSNAsync(string SN, string TYPE) {
            this.SearchSNAsync(SN, TYPE, null);
        }
        
        /// <remarks/>
        public void SearchSNAsync(string SN, string TYPE, object userState) {
            if ((this.SearchSNOperationCompleted == null)) {
                this.SearchSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchSNOperationCompleted);
            }
            this.InvokeAsync("SearchSN", new object[] {
                        SN,
                        TYPE}, this.SearchSNOperationCompleted, userState);
        }
        
        private void OnSearchSNOperationCompleted(object arg) {
            if ((this.SearchSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchSNCompleted(this, new SearchSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_E_Group", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Insert_E_Group(string[] listDeviceID, string group_id, string[] listDeviceType, string line, string station, string testerName) {
            object[] results = this.Invoke("Insert_E_Group", new object[] {
                        listDeviceID,
                        group_id,
                        listDeviceType,
                        line,
                        station,
                        testerName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_E_GroupAsync(string[] listDeviceID, string group_id, string[] listDeviceType, string line, string station, string testerName) {
            this.Insert_E_GroupAsync(listDeviceID, group_id, listDeviceType, line, station, testerName, null);
        }
        
        /// <remarks/>
        public void Insert_E_GroupAsync(string[] listDeviceID, string group_id, string[] listDeviceType, string line, string station, string testerName, object userState) {
            if ((this.Insert_E_GroupOperationCompleted == null)) {
                this.Insert_E_GroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_E_GroupOperationCompleted);
            }
            this.InvokeAsync("Insert_E_Group", new object[] {
                        listDeviceID,
                        group_id,
                        listDeviceType,
                        line,
                        station,
                        testerName}, this.Insert_E_GroupOperationCompleted, userState);
        }
        
        private void OnInsert_E_GroupOperationCompleted(object arg) {
            if ((this.Insert_E_GroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_E_GroupCompleted(this, new Insert_E_GroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListGroupID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetListGroupID() {
            object[] results = this.Invoke("GetListGroupID", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetListGroupIDAsync() {
            this.GetListGroupIDAsync(null);
        }
        
        /// <remarks/>
        public void GetListGroupIDAsync(object userState) {
            if ((this.GetListGroupIDOperationCompleted == null)) {
                this.GetListGroupIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListGroupIDOperationCompleted);
            }
            this.InvokeAsync("GetListGroupID", new object[0], this.GetListGroupIDOperationCompleted, userState);
        }
        
        private void OnGetListGroupIDOperationCompleted(object arg) {
            if ((this.GetListGroupIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListGroupIDCompleted(this, new GetListGroupIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListTypeDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetListTypeDevices() {
            object[] results = this.Invoke("GetListTypeDevices", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetListTypeDevicesAsync() {
            this.GetListTypeDevicesAsync(null);
        }
        
        /// <remarks/>
        public void GetListTypeDevicesAsync(object userState) {
            if ((this.GetListTypeDevicesOperationCompleted == null)) {
                this.GetListTypeDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListTypeDevicesOperationCompleted);
            }
            this.InvokeAsync("GetListTypeDevices", new object[0], this.GetListTypeDevicesOperationCompleted, userState);
        }
        
        private void OnGetListTypeDevicesOperationCompleted(object arg) {
            if ((this.GetListTypeDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListTypeDevicesCompleted(this, new GetListTypeDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIsCheckedATEChecklist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIsCheckedATEChecklist(string Linename, string ModelName, string Station, string Shift, string Datetime, string CheckSum) {
            object[] results = this.Invoke("CheckIsCheckedATEChecklist", new object[] {
                        Linename,
                        ModelName,
                        Station,
                        Shift,
                        Datetime,
                        CheckSum});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIsCheckedATEChecklistAsync(string Linename, string ModelName, string Station, string Shift, string Datetime, string CheckSum) {
            this.CheckIsCheckedATEChecklistAsync(Linename, ModelName, Station, Shift, Datetime, CheckSum, null);
        }
        
        /// <remarks/>
        public void CheckIsCheckedATEChecklistAsync(string Linename, string ModelName, string Station, string Shift, string Datetime, string CheckSum, object userState) {
            if ((this.CheckIsCheckedATEChecklistOperationCompleted == null)) {
                this.CheckIsCheckedATEChecklistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIsCheckedATEChecklistOperationCompleted);
            }
            this.InvokeAsync("CheckIsCheckedATEChecklist", new object[] {
                        Linename,
                        ModelName,
                        Station,
                        Shift,
                        Datetime,
                        CheckSum}, this.CheckIsCheckedATEChecklistOperationCompleted, userState);
        }
        
        private void OnCheckIsCheckedATEChecklistOperationCompleted(object arg) {
            if ((this.CheckIsCheckedATEChecklistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIsCheckedATEChecklistCompleted(this, new CheckIsCheckedATEChecklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTPGVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckTPGVersion(string ModelName, string Station, string IVersion, string CheckSum) {
            object[] results = this.Invoke("CheckTPGVersion", new object[] {
                        ModelName,
                        Station,
                        IVersion,
                        CheckSum});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTPGVersionAsync(string ModelName, string Station, string IVersion, string CheckSum) {
            this.CheckTPGVersionAsync(ModelName, Station, IVersion, CheckSum, null);
        }
        
        /// <remarks/>
        public void CheckTPGVersionAsync(string ModelName, string Station, string IVersion, string CheckSum, object userState) {
            if ((this.CheckTPGVersionOperationCompleted == null)) {
                this.CheckTPGVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTPGVersionOperationCompleted);
            }
            this.InvokeAsync("CheckTPGVersion", new object[] {
                        ModelName,
                        Station,
                        IVersion,
                        CheckSum}, this.CheckTPGVersionOperationCompleted, userState);
        }
        
        private void OnCheckTPGVersionOperationCompleted(object arg) {
            if ((this.CheckTPGVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTPGVersionCompleted(this, new CheckTPGVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InsertChecklistATECompletedEventHandler(object sender, InsertChecklistATECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertChecklistATECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertChecklistATECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateATEWirelessFromTPGCompletedEventHandler(object sender, UpdateATEWirelessFromTPGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateATEWirelessFromTPGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateATEWirelessFromTPGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ConnectorsUseTimesCompletedEventHandler(object sender, ConnectorsUseTimesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectorsUseTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectorsUseTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ConnectorsUseTimes_NewCompletedEventHandler(object sender, ConnectorsUseTimes_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectorsUseTimes_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectorsUseTimes_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void FixtureControlCompletedEventHandler(object sender, FixtureControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FixtureControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FixtureControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void get_trusted_urlCompletedEventHandler(object sender, get_trusted_urlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_trusted_urlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_trusted_urlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void get_trusted_ticketCompletedEventHandler(object sender, get_trusted_ticketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_trusted_ticketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_trusted_ticketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void generateTicketCompletedEventHandler(object sender, generateTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal generateTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SearchSNCompletedEventHandler(object sender, SearchSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void Insert_E_GroupCompletedEventHandler(object sender, Insert_E_GroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_E_GroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_E_GroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetListGroupIDCompletedEventHandler(object sender, GetListGroupIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListGroupIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListGroupIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetListTypeDevicesCompletedEventHandler(object sender, GetListTypeDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListTypeDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListTypeDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CheckIsCheckedATEChecklistCompletedEventHandler(object sender, CheckIsCheckedATEChecklistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIsCheckedATEChecklistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIsCheckedATEChecklistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CheckTPGVersionCompletedEventHandler(object sender, CheckTPGVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTPGVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTPGVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591